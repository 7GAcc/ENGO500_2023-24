ENGO 500A Capstone

The code in this directory serves as data analysis code to test different methods of step and rep detection
from mobile imu sensors in a fixed position

There are three directories in this code branch
- Data : Directory containing the .mat files with the imu data for workouts corresponding to different people, primarily walking
- Processed Data : Additional workout data that was processed to better fit the timeframes where workouts were happening to ease in analysis
- Figures : a Directory generated by the code to organize the visualization and statistical results of workout data. the directory follows the
order of Figures/ Name/ Exercise Type/ where the exercise type then stores a directory named after the file it processed and contains the .fig files
of the data, as well as statistics of different methods used to try and detect steps/reps. It also contains .pdf files that have all of the figures and stats
compiled as a report

In terms of .m scripts and functions used, there are two main scripts, and then a handful of accessory functions used to perform repetiive tasks.

Scripts:

- SingleSensorAnalysis.m : This script parses through all of the .m files in either the data or processed data folders, and extracts out 
the relevant imu data, before passing that data to the zero_cross_visualizer.m function. It can be used to either select a specific exercise, or 
just parse an entire directory

- Exercise_assessment.m : This script requires that the SingleSensorAnalysis.m has been run and that the Figures Directory exists. It will parse through all 
of the data within the Figures directory and compile data together based on exercise type from all individuals. It will then perform statistical analysis
To see what methods, what sensors and what axis of those sensors had the lowest error in detecting steps/reps.

Functions:

- zero_cross_visualizer : This function serves as the primary analyis function for a specific sensor from an imu platform. It takes the data, as well as a known
or estimated step/repcount and performs 4 different methods of analysis on them, using findpeaks, findpeaks above zero, finding peaks twice, and using a zero cross method.
It also downsamples the data by a set amount and uses a calibration .m file to calibrate the imu data. Once it has generated figures it stores them to a report, and the sensor data
to a table, before returning them.

- step_analysis_plotter.m : Poorly named at the beggining of this code base, this is just a plotting function with various settings set inside a code block so it did not 
have to be rewritten mutliple times in the zero_cross_visualizer function.

- time_range_finder.m : Data collection was done in such a way that subjects would pause for 5 seconds before beginning an exercise, and once complete they would 
pause for an additional 5 seconds. This function simply parses through the data at the start to find a long period of inactivity, and parses from the end to find a similar pause 
in activity, and then returns the time index of the start and stop time to be used by trim the data to only the relevant time period for zero cross analysis.

- report_intializer.m : Using matlabs reportgen toolbox, this is jsut a function used to initialise the layout of the reports used to store data in each of the functions.
- centerFigure.m : a matlab published function that had to hard coded in that simply centers figures during report generation

- extract_exercise.m : This function is a regex extractor that takes the naming convention of our data files to extract the name of the test subject, the 
exercise they were performing, and the amount of reps that they did for that exercise, and return those values for file generation and statistical assessments

- exercise_loader.m : This function is used to compile all of the zero_cross_visualizer error data of each sensor axis for a specific exercise across all of the test subjects
and return it so that statistical analysis can be performed on the data.

- best_sensor_finder.m : This function is used in tandem with the Exercise_assessment.m script, and finds the method and sensors with the lowest average error 
and returns them so statistical analysis can be focused on the most useable data.





